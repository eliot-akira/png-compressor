{
  "version": 3,
  "sources": ["../../src/tests/equal.ts", "../../src/tests/runner.ts", "../../src/tests/index.ts"],
  "sourcesContent": ["// Equality\n\nconst { getOwnPropertySymbols, is, keys, prototype } = Object\nconst { hasOwnProperty, valueOf } = prototype\nconst { isView } = ArrayBuffer\nconst { Node } = globalThis\n\nconst isEqualArray = (\n  a: unknown[],\n  b: unknown[],\n  compareMap: Map<unknown, unknown>,\n): boolean => {\n  if (a.length !== b.length) return false\n\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (!isEqualGeneral(a[i], b[i], compareMap)) return false\n  }\n\n  return true\n}\n\nconst isEqualMapAdvanced = (\n  a: Map<unknown, unknown>,\n  b: Map<unknown, unknown>,\n  compareMap: Map<unknown, unknown>,\n): boolean => {\n  const entriesA = Array.from(a.entries())\n  const entriesB = Array.from(b.entries())\n\n  /* eslint-disable no-labels */\n  outer: for (let i = entriesA.length - 1; i >= 0; i--) {\n    const entryA = entriesA[i]\n\n    for (let j = entriesB.length - 1; j >= 0; j--) {\n      const entryB = entriesB[j]\n\n      if (\n        isEqualGeneral(entryA[0], entryB[0], compareMap) &&\n        isEqualGeneral(entryA[1], entryB[1], compareMap)\n      ) {\n        entriesB.splice(j, 1)\n\n        continue outer\n      }\n    }\n\n    return false\n  }\n\n  return true\n}\n\nconst isEqualMap = (\n  a: Map<unknown, unknown>,\n  b: Map<unknown, unknown>,\n  compareMap: Map<unknown, unknown>,\n): boolean => {\n  if (a.size !== b.size) return false\n\n  for (const [key, valueA] of a.entries()) {\n    const valueB = b.get(key)\n\n    if (!isEqualGeneral(valueA, valueB, compareMap)) {\n      return isEqualMapAdvanced(a, b, compareMap)\n    }\n\n    if (valueB === undefined && !b.has(key)) return false\n  }\n\n  return true\n}\n\nconst isEqualSetAdvanced = (\n  a: Set<unknown>,\n  b: Set<unknown>,\n  compareMap: Map<unknown, unknown>,\n): boolean => {\n  const valuesA = Array.from(a.values())\n  const valuesB = Array.from(b.values())\n\n  outer: for (let i = valuesA.length - 1; i >= 0; i--) {\n    const valueA = valuesA[i]\n\n    for (let j = valuesB.length - 1; j >= 0; j--) {\n      const valueB = valuesB[j]\n\n      if (isEqualGeneral(valueA, valueB, compareMap)) {\n        valuesB.splice(j, 1)\n\n        continue outer\n      }\n    }\n\n    return false\n  }\n\n  return true\n}\n\nconst isEqualSet = (\n  a: Set<unknown>,\n  b: Set<unknown>,\n  compareMap: Map<unknown, unknown>,\n): boolean => {\n  if (a.size !== b.size) return false\n\n  for (const [valueA] of a.entries()) {\n    if (!b.has(valueA)) return isEqualSetAdvanced(a, b, compareMap)\n  }\n\n  return true\n}\n\nconst isEqualDate = (a: Date, b: Date): boolean => {\n  return is(a.getTime(), b.getTime())\n}\n\nconst isEqualRegExp = (a: RegExp, b: RegExp): boolean => {\n  return a.source === b.source && a.flags === b.flags\n}\n\nconst isEqualArrayBuffer = (a: ArrayBuffer, b: ArrayBuffer): boolean => {\n  if (a.byteLength !== b.byteLength) return false\n\n  return isEqualTypedArray(new Uint8Array(a), new Uint8Array(b))\n}\n\nfunction isEqualTypedArray<\n  T extends\n    | Int8Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n    | BigInt64Array\n    | BigUint64Array,\n>(a: T, b: T): boolean {\n  if (a.length !== b.length) return false\n\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (a[i] !== b[i]) return false\n  }\n\n  return true\n}\n\nconst isEqualValueOf = (\n  a: object,\n  b: object,\n  compareMap: Map<unknown, unknown>,\n): boolean => {\n  return isEqualGeneral(a.valueOf(), b.valueOf(), compareMap)\n}\n\nconst isEqualObject = (\n  a: Record<string | number | symbol, unknown>,\n  b: Record<string | number | symbol, unknown>,\n  compareMap: Map<unknown, unknown>,\n): boolean => {\n  const propertiesA = keys(a)\n  const propertiesB = keys(b)\n\n  if (propertiesA.length !== propertiesB.length) return false\n\n  for (let i = propertiesA.length - 1; i >= 0; i--) {\n    const property = propertiesA[i]\n    const valueA = a[property]\n    const valueB = b[property]\n\n    if (!isEqualGeneral(valueA, valueB, compareMap)) return false\n\n    if (valueB === undefined && !hasOwnProperty.call(b, property)) return false\n  }\n\n  const symbolsA = getOwnPropertySymbols(a)\n  const symbolsB = getOwnPropertySymbols(b)\n\n  if (symbolsA.length !== symbolsB.length) return false\n\n  for (let i = symbolsA.length - 1; i >= 0; i--) {\n    const symbol = symbolsA[i]\n    const valueA = a[symbol]\n    const valueB = b[symbol]\n\n    if (!isEqualGeneral(valueA, valueB, compareMap)) return false\n\n    if (valueB === undefined && !hasOwnProperty.call(b, symbol)) return false\n  }\n\n  return true\n}\n\nfunction isEqualGeneral(\n  a: any,\n  b: any,\n  compareMap: Map<unknown, unknown>,\n): boolean {\n  if (is(a, b)) return true\n\n  if (\n    typeof a !== 'object' ||\n    typeof b !== 'object' ||\n    a === null ||\n    b === null\n  ) {\n    return false\n  }\n\n  const { constructor } = a\n  const { constructor: constructorB } = b\n\n  if (constructor && constructorB && constructor !== constructorB) {\n    return false\n  }\n\n  if (compareMap.get(a) === b) return true\n\n  compareMap.set(a, b)\n\n  if (!constructor || !constructorB) {\n    if (\n      (!constructor || constructor === Object) &&\n      (!constructorB || constructorB === Object)\n    ) {\n      return isEqualObject(a, b, compareMap)\n    }\n    return false\n  }\n  if (constructor === Array) {\n    return isEqualArray(a, b, compareMap)\n  }\n  if (constructor === Map) {\n    return isEqualMap(a, b, compareMap)\n  }\n  if (constructor === Set) {\n    return isEqualSet(a, b, compareMap)\n  }\n  if (constructor === Date) {\n    return isEqualDate(a, b)\n  }\n  if (constructor === RegExp) {\n    return isEqualRegExp(a, b)\n  }\n  if (constructor === ArrayBuffer) {\n    return isEqualArrayBuffer(a, b)\n  }\n  if (isView(a)) {\n    return isEqualTypedArray(a, b)\n  }\n  if (\n    constructor === Promise ||\n    constructor === WeakMap ||\n    constructor === WeakSet ||\n    constructor === Node\n  ) {\n    return false\n  }\n  if (a.valueOf !== valueOf) {\n    return isEqualValueOf(a, b, compareMap)\n  }\n  return isEqualObject(a, b, compareMap)\n}\n\nexport function isEqual(a: unknown, b: unknown): boolean {\n  return isEqualGeneral(a, b, new Map())\n}\n", "import { isEqual } from './equal.js'\n// Test runner\n\nconst tests: Test[] = []\n\nexport type Test = {\n  title: string\n  callback: TestCallback\n  assertions: Assertion[]\n  result?: boolean\n  error?: unknown\n}\n\nexport type TestCallback = (it: Function, is: Function) => any\n\nexport type Assertion = {\n  title: string\n  result: boolean\n}\n\nexport const test = (title: string, callback: TestCallback) =>\n  tests.push({\n    title,\n    callback,\n    assertions: [],\n    result: undefined,\n    error: undefined,\n  })\n\nexport const runTests = async (report = consoleReporter) => {\n  report('tests', tests)\n  for (const test of tests) {\n    report('test', { test })\n    const it = (title: string, result: boolean) => {\n      report('assert', { title, result })\n      test.assertions.push({ title, result })\n    }\n    try {\n      await test.callback(it, isEqual)\n      test.result = test.assertions.filter((a) => !a.result).length === 0\n    } catch (error) {\n      report('error', error)\n      test.result = false\n      test.error = error\n    }\n    report('testEnd', test)\n  }\n\n  // Report\n\n  const pass = tests.map((test) => test.result).filter((r) => r).length\n  const total = tests.length\n  const fail = total - pass\n\n  const results = {\n    tests,\n    pass,\n    fail,\n    total,\n  }\n\n  report('testsEnd', results)\n\n  return results\n}\n\n// Reporter\n\nexport function consoleReporter(type: string, data: any) {\n  switch (type) {\n    case 'tests':\n      console.log('Tests')\n      break\n    case 'testsEnd':\n      {\n        const { pass, total } = data\n        console.log(pass, '/', total)\n      }\n      break\n    case 'test':\n      {\n        const { test } = data\n        console.group(test.title)\n      }\n      break\n    case 'testEnd':\n      console.groupEnd()\n      break\n    case 'assert':\n      {\n        const { title, result } = data\n        console[result ? 'log' : 'warn'](title, !!result)\n      }\n      break\n    case 'error':\n      console.error(data)\n      break\n    default:\n      break\n  }\n}\n", "import { test, runTests } from './runner.js'\nimport type * as PNGCompressor from '../index.js'\n\n// Tests\n\nconst { PNGCompressor: png } = window as Window &\n  typeof globalThis & {\n    PNGCompressor: typeof PNGCompressor\n  }\n\nconsole.log('PNGCompressor', png)\n\nconst encodableDataTypes: [key: string, value: any][] = [\n  ['string', 'Hello, world'],\n  ['number', 123],\n  ['boolean', true],\n  ['null', null],\n]\n\n// Array of all types\nconst arrayTypeValues: any[] = encodableDataTypes.map(([_, value]) => value)\narrayTypeValues.push(JSON.parse(JSON.stringify(arrayTypeValues)))\n\n// Object of all types\nconst objectTypeValue: {\n  [key: string]: any\n} = encodableDataTypes.reduce((obj, [key, value]) => {\n  obj[key] = value\n  return obj\n}, {} as any)\narrayTypeValues.push(JSON.parse(JSON.stringify(objectTypeValue)))\n\nencodableDataTypes.push(['array', arrayTypeValues])\nencodableDataTypes.push(['object', objectTypeValue])\n\ntest('Array buffer', async (it, is) => {\n  for (const [type, source] of encodableDataTypes) {\n    const encoded = await png.valueToArrayBuffer(source)\n\n    it(\n      `valueToArrayBuffer() converts ${type} to array buffer`,\n      encoded instanceof ArrayBuffer,\n    )\n\n    const decoded = await png.arrayBufferToValue(encoded)\n\n    it(\n      `arrayBufferToValue() converts array buffer to original value (${type})`,\n      is(decoded, source),\n    )\n  }\n})\n\ntest('Compress', async (it, is) => {\n  for (const [type, source] of encodableDataTypes) {\n    const encoded = await png.compress(await png.valueToArrayBuffer(source))\n\n    it(\n      `compress() compresses ${type} to array buffer`,\n      encoded instanceof ArrayBuffer,\n    )\n\n    const decoded = await png.arrayBufferToValue(await png.decompress(encoded))\n\n    it(\n      `decompress() decompresses array buffer to original value (${type})`,\n      is(decoded, source),\n    )\n  }\n})\n\n// ...\n\ntest('PNG', async (it, is) => {\n  for (const [type, source] of encodableDataTypes) {\n    const encoded = await png.encodeImageData(source)\n\n    it(\n      `encode() encodes ${type} to array buffer`,\n      encoded instanceof ArrayBuffer,\n    )\n\n    const decoded = await png.decodeImageData(encoded)\n\n    it(\n      `decode() decodes array buffer to original value (${type})`,\n      is(decoded, source),\n    )\n  }\n})\n\n// Report\n\nconst style = document.createElement('style')\nstyle.innerText = `\nhtml, body { margin: 0 }\nbody { margin: 2rem; }\n.success { color: green }    \n.fail { color: red }      \n`\ndocument.head.appendChild(style)\n\nconst $result = document.createElement('div')\ndocument.body.appendChild($result)\n\nrunTests().then((results) => {\n  const { tests, pass, fail, total } = results\n\n  $result.innerHTML = `\n\n  <h1>Tests</h1>\n\n  <h2>Total <span class=${\n    pass === total ? 'success' : 'fail'\n  }>${pass} / ${total}</span> pass</h2>\n\n  ${tests\n    .map(\n      ({ title, assertions, error }) => `\n\n    <h3>${title}</h3>\n\n    ${assertions\n      .map(\n        ({ title, result }) => `\n      <p class=${result ? 'success' : 'fail'}>${\n        result ? '\u2714' : '\u2716'\n      } ${title}</p>\n    `,\n      )\n      .join('')}\n\n    ${error ? '<p class=fail>' + error + '</p>' : ''}\n\n  `,\n    )\n    .join('')}\n`\n})\n"],
  "mappings": "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",
  "names": ["test", "is", "tests", "title"]
}
