{
  "version": 3,
  "sources": ["../src/index.ts", "../src/image.ts", "../src/png.ts", "../src/compress.ts", "../src/json-array-buffer.ts", "../src/encode.ts", "../src/decode.ts", "../src/file.ts", "../src/png-compressor.ts"],
  "sourcesContent": ["/**\n * PNG Compressor\n * @module\n */\n\nexport * from './encode.js'\nexport * from './decode.js'\nexport * from './compress.js'\nexport * from './png.js'\nexport * from './image.js'\nexport * from './file.js'\nexport * from './json-array-buffer.js'\n", "/**\n * Methods to work with image data\n * @module\n */\n\nexport async function imageElementToBlob(\n  image: HTMLImageElement,\n): Promise<Blob> {\n  const { canvas } = imageElementToCanvas(image)\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(function (blob) {\n      if (!blob) reject(new Error(''))\n      else resolve(blob)\n    }, 'image/png')\n  })\n}\n\nexport async function blobToImageElement(\n  blob: Blob,\n  image: HTMLImageElement = document.createElement('img'),\n): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const listener = () => {\n      URL.revokeObjectURL(image.src)\n      image.removeEventListener('load', listener)\n      resolve(image)\n    }\n\n    image.addEventListener('load', listener)\n    image.src = URL.createObjectURL(blob)\n  })\n}\n\nexport function getImageData(image: HTMLImageElement) {\n  const { context, width, height } = imageElementToCanvas(image)\n  return context.getImageData(0, 0, width, height).data\n}\n\nexport function imageElementToCanvas(image: HTMLImageElement): {\n  canvas: HTMLCanvasElement\n  context: CanvasRenderingContext2D\n  width: number\n  height: number\n} {\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')!\n  // Update canvas size to match image\n  const width = (canvas.width = image.naturalWidth)\n  const height = (canvas.height = image.naturalHeight)\n\n  context?.drawImage(image, 0, 0)\n\n  return {\n    canvas,\n    context,\n    width,\n    height,\n  }\n}\n\nexport function encodeDataIntoImage(data: Uint8Array, img: Uint8ClampedArray) {\n  for (let i = 0, size = data.length; i < 3; i++) {\n    img[i] = (size / Math.pow(256, i)) % 256 | 0\n  }\n  img[3] = 255\n  for (let i = 4, j = 0, l = img.length; i < l; i += 4, j += 3) {\n    img[i] = data[j] || 0\n    img[i + 1] = data[j + 1] || 0\n    img[i + 2] = data[j + 2] || 0\n    img[i + 3] = 255 // Opacity is unused because it can affect color values\n  }\n  return img\n}\n\nexport function decodeDataFromImage(image: Uint8ClampedArray): ArrayBuffer {\n  let size = 0\n  for (let i = 0; i < 3; i++) {\n    size += image[i] * Math.pow(256, i)\n  }\n  const data = new Uint8Array(size)\n\n  root: for (let i = 4, j = 0, l = image.length; j < l; i += 4, j += 3) {\n    for (let k = 0; k < 3; k++) {\n      if (j + k >= size) break root\n      data[j + k] = image[i + k]\n    }\n  }\n  return data.buffer\n}\n", "import {\n  encodeDataIntoImage,\n  blobToImageElement,\n  decodeDataFromImage,\n  getImageData,\n} from './image.js'\n\n/**\n * Encode binary as image data\n */\nexport async function encodeBinaryToPng(\n  buffer: ArrayBuffer,\n): Promise<ArrayBuffer> {\n  const blob = await encodeBinaryToBlob(buffer)\n  return await blob.arrayBuffer()\n}\n\n/**\n * Encode binary as canvas blob\n */\nexport async function encodeBinaryToBlob(buffer: ArrayBuffer): Promise<Blob> {\n  const data = new Uint8Array(buffer)\n\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    const size = Math.ceil(Math.sqrt(data.length / 3 + 1))\n\n    canvas.width = size\n    canvas.height = size\n\n    const image = ctx?.getImageData(0, 0, size, size)!\n\n    encodeDataIntoImage(data, image.data)\n\n    ctx?.putImageData(image, 0, 0)\n\n    canvas.toBlob((blob) => {\n      if (!blob) reject(new Error('Canvas failed to create blob'))\n      else resolve(blob)\n    }, 'image/png')\n  })\n}\n\n/**\n * Decode binary from image data\n */\nexport async function decodeBinaryFromPng(\n  buffer: ArrayBuffer,\n): Promise<ArrayBuffer> {\n  if (!(buffer instanceof ArrayBuffer)) {\n    throw new Error('Expected ArrayBuffer but got ' + typeof buffer)\n  }\n\n  const blob = new Blob([buffer])\n  const image = await blobToImageElement(blob)\n\n  return decodeDataFromImage(getImageData(image))\n}\n", "/**\n * Methods to compress and decompress using [CompressionStream](https://developer.mozilla.org/docs/Web/API/CompressionStream)\n * @module\n */\n\n// Browser and server\nconst { CompressionStream, DecompressionStream, Response } = globalThis\n\n/**\n * Compression format\n */\nexport type CompressionFormat = 'gzip' | 'deflate' | 'deflate-raw'\n\nexport const defaultCompressionFormat: CompressionFormat = 'gzip'\n\n/**\n * Compress array buffer\n */\nexport async function compress(\n  buffer: ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<ArrayBuffer> {\n  const compressor = new CompressionStream(compressionFormat)\n  const stream = new Response(buffer).body?.pipeThrough(compressor)\n  return await new Response(stream).arrayBuffer()\n}\n\nasync function decompressAsResponse(\n  buffer: ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<Response> {\n  const decompressor = new DecompressionStream(compressionFormat)\n  const stream = new Response(buffer).body?.pipeThrough(decompressor)\n  return new Response(stream)\n}\n\nexport async function decompressAsArrayBuffer(\n  buffer: ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<ArrayBuffer> {\n  return (await decompressAsResponse(buffer, compressionFormat)).arrayBuffer()\n}\n\nexport async function decompressAsString(\n  buffer: ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<string> {\n  return (await decompressAsResponse(buffer, compressionFormat)).text()\n}\n\nexport const decompress = decompressAsArrayBuffer\n", "/**\n * Convert JSON-serializable value to array buffer and back\n * @module\n */\n\n/**\n * Convert JSON-serializable value to array buffer\n */\nexport function valueToArrayBuffer(value: any): ArrayBuffer {\n  // Value -> JSON String -> Uint8Array -> ArrayBuffer\n  return new TextEncoder().encode(JSON.stringify(value)).buffer\n}\n\n/**\n * Convert array buffer to JSON-serializable value\n */\nexport function arrayBufferToValue(buffer: ArrayBuffer) {\n  // ArrayBuffer -> JSON String -> Value\n  return JSON.parse(new TextDecoder().decode(buffer))\n}\n", "import { encodeBinaryToPng, encodeBinaryToBlob } from './png.js'\nimport { compress } from './compress.js'\nimport { valueToArrayBuffer } from './json-array-buffer.js'\nimport { blobToImageElement } from './image.js'\n\n/**\n * Encode JSON-serializable value to image data\n */\nexport async function encode(value: any): Promise<ArrayBuffer> {\n  return await encodeBinary(valueToArrayBuffer(value))\n}\n\n/**\n * Encode JSON-serializable value to image data as blob\n */\nexport async function encodeToBlob(value: any): Promise<Blob> {\n  return await encodeBinaryToBlob(await compress(valueToArrayBuffer(value)))\n}\n\n/**\n * Encode JSON-serializable value to HTML image element\n */\nexport async function encodeToImage(\n  value: any,\n  image?: HTMLImageElement,\n): Promise<HTMLImageElement> {\n  return blobToImageElement(await encodeToBlob(value), image)\n}\n\n/**\n * Encode binary data to image\n */\nexport async function encodeBinary(buffer: ArrayBuffer): Promise<ArrayBuffer> {\n  return await encodeBinaryToPng(await compress(buffer))\n}\n", "import { decodeBinaryFromPng } from './png.js'\nimport { decompressAsArrayBuffer } from './compress.js'\nimport { arrayBufferToValue } from './json-array-buffer.js'\n\n/**\n * Decode image data to JSON-serializable value\n */\nexport async function decode(buffer: ArrayBuffer): Promise<any> {\n  return arrayBufferToValue(await decodeBinary(buffer))\n}\n\n/**\n * Decode image data to array buffer\n */\nexport async function decodeBinary(buffer: ArrayBuffer): Promise<ArrayBuffer> {\n  return await decompressAsArrayBuffer(await decodeBinaryFromPng(buffer))\n}\n", "import { decodeBinary } from './decode.js'\nimport { arrayBufferToValue } from './json-array-buffer.js'\n\n/**\n * Download encoded file\n */\nexport function downloadImage(blob: Blob, name = 'compressed.png') {\n  const url = URL.createObjectURL(blob)\n\n  const a = document.createElement('a')\n  a.download = name\n  a.href = url\n  document.body.appendChild(a)\n  a.click()\n  document.body.removeChild(a)\n\n  URL.revokeObjectURL(url)\n}\n\n/**\n * Decode binary from uploaded file\n */\nexport async function decodeBinaryFromFile(file: File): Promise<ArrayBuffer> {\n  const buffer = await getBufferfromFile(file)\n  return await decodeBinary(buffer)\n}\n\n/**\n * Decode JSON-serializable value from uploaded file\n */\nexport async function decodeFromFile(file: File): Promise<any> {\n  return arrayBufferToValue(await decodeBinaryFromFile(file))\n}\n\n/**\n * Get uploaded file data\n */\nexport async function getBufferfromFile(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.addEventListener('load', () => {\n      resolve(reader.result as ArrayBuffer)\n    })\n    reader.addEventListener('error', reject)\n    reader.readAsArrayBuffer(file)\n  })\n}\n", "import * as PNGCompressor from './index.js'\n\n// Export to global\n;(window as any).PNGCompressor = PNGCompressor\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "arrayBufferToValue", "blobToImageElement", "compress", "decode", "decodeBinary", "decodeBinaryFromFile", "decodeBinaryFromPng", "decodeDataFromImage", "decodeFromFile", "decompress", "decompressAsArrayBuffer", "decompressAsString", "defaultCompressionFormat", "downloadImage", "encode", "encodeBinary", "encodeBinaryToBlob", "encodeBinaryToPng", "encodeDataIntoImage", "encodeToBlob", "encodeToImage", "getBufferfromFile", "getImageData", "imageElementToBlob", "imageElementToCanvas", "valueToArrayBuffer", "imageElementToBlob", "image", "canvas", "imageElementToCanvas", "resolve", "reject", "blob", "blobToImageElement", "listener", "getImageData", "context", "width", "height", "encodeDataIntoImage", "data", "img", "i", "size", "j", "l", "decodeDataFromImage", "root", "k", "encodeBinaryToPng", "buffer", "encodeBinaryToBlob", "data", "resolve", "reject", "canvas", "ctx", "size", "image", "encodeDataIntoImage", "blob", "decodeBinaryFromPng", "blobToImageElement", "decodeDataFromImage", "getImageData", "CompressionStream", "DecompressionStream", "Response", "defaultCompressionFormat", "compress", "buffer", "compressionFormat", "compressor", "stream", "decompressAsResponse", "decompressor", "decompressAsArrayBuffer", "decompressAsString", "decompress", "valueToArrayBuffer", "value", "arrayBufferToValue", "buffer", "encode", "value", "encodeBinary", "valueToArrayBuffer", "encodeToBlob", "encodeBinaryToBlob", "compress", "encodeToImage", "image", "blobToImageElement", "buffer", "encodeBinaryToPng", "decode", "buffer", "arrayBufferToValue", "decodeBinary", "decompressAsArrayBuffer", "decodeBinaryFromPng", "downloadImage", "blob", "name", "url", "a", "decodeBinaryFromFile", "file", "buffer", "getBufferfromFile", "decodeBinary", "decodeFromFile", "arrayBufferToValue", "resolve", "reject", "reader", "src_exports"]
}
