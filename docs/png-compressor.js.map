{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/image/encode.ts", "../../src/image/create.ts", "../../src/image/convert.ts", "../../src/png.ts", "../../src/compress.ts", "../../src/json-array-buffer.ts", "../../src/encode.ts", "../../src/decode.ts"],
  "sourcesContent": ["export * from './encode.js'\nexport * from './decode.js'\nexport * from './compress.js'\nexport * from './png.js'\nexport * from './image/index.js'\n", "export function encodeDataIntoImage(data: Uint8Array, img: Uint8ClampedArray) {\n  for (let i = 0, size = data.length; i < 3; i++) {\n    img[i] = (size / Math.pow(256, i)) % 256 | 0\n  }\n  img[3] = 255\n  for (let i = 4, j = 0, l = img.length; i < l; i += 4, j += 3) {\n    img[i] = data[j] || 0\n    img[i + 1] = data[j + 1] || 0\n    img[i + 2] = data[j + 2] || 0\n    img[i + 3] = 255 // Opacity is unused because it can affect color values\n  }\n  return img\n}\n\nexport function decodeDataFromImage(image: Uint8ClampedArray): ArrayBuffer {\n  let size = 0\n  for (let i = 0; i < 3; i++) {\n    size += image[i] * Math.pow(256, i)\n  }\n  const data = new Uint8Array(size)\n\n  root: for (let i = 4, j = 0, l = image.length; j < l; i += 4, j += 3) {\n    for (let k = 0; k < 3; k++) {\n      if (j + k >= size) break root\n      data[j + k] = image[i + k]\n    }\n  }\n  return data.buffer\n}\n", "export function createImage(\n  blob: Blob,\n  image: HTMLImageElement = document.createElement('img'),\n): HTMLImageElement {\n  const url = URL.createObjectURL(blob)\n  image.src = url\n  URL.revokeObjectURL(url)\n  return image\n}\n\nexport function downloadImage(blob: Blob, name = 'compressed.png') {\n  const url = URL.createObjectURL(blob)\n\n  const a = document.createElement('a')\n  a.download = name\n  a.href = url\n  document.body.appendChild(a)\n  a.click()\n  document.body.removeChild(a)\n\n  URL.revokeObjectURL(url)\n}\n", "export async function imageElementToBlob(\n  image: HTMLImageElement,\n): Promise<Blob> {\n  const { canvas } = imageElementToCanvas(image)\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(function (blob) {\n      if (!blob) reject(new Error(''))\n      else resolve(blob)\n    }, 'image/png')\n  })\n}\n\nexport async function blobToImage(blob: Blob): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.onload = function () {\n      URL.revokeObjectURL(img.src)\n      resolve(img)\n    }\n    img.onerror = reject\n    img.src = URL.createObjectURL(blob)\n  })\n}\n\nexport function imageElementToData(image: HTMLImageElement) {\n  const { context, width, height } = imageElementToCanvas(image)\n  return context.getImageData(0, 0, width, height).data\n}\n\nexport function imageElementToCanvas(image: HTMLImageElement): {\n  canvas: HTMLCanvasElement\n  context: CanvasRenderingContext2D\n  width: number\n  height: number\n} {\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')!\n\n  // Update canvas size to match image\n  const width = (canvas.width = image.naturalWidth)\n  const height = (canvas.height = image.naturalHeight)\n\n  context?.drawImage(image, 0, 0)\n\n  return {\n    canvas,\n    context,\n    width,\n    height,\n  }\n}\n", "import {\n  encodeDataIntoImage,\n  blobToImage,\n  decodeDataFromImage,\n  imageElementToData,\n} from './image/index.js'\n\n/**\n * Encode data as PNG\n */\nexport async function encodeBufferToPng(\n  buffer: ArrayBuffer,\n): Promise<ArrayBuffer> {\n  const blob = await encodeBufferToBlob(buffer)\n  return await blob.arrayBuffer()\n}\n\nexport async function encodeBufferToBlob(buffer: ArrayBuffer): Promise<Blob> {\n  const data = new Uint8Array(buffer)\n\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    const size = Math.ceil(Math.sqrt(data.length / 3 + 1))\n\n    canvas.width = size\n    canvas.height = size\n\n    const image = ctx?.getImageData(0, 0, size, size)!\n\n    encodeDataIntoImage(data, image.data)\n\n    ctx?.putImageData(image, 0, 0)\n\n    canvas.toBlob((blob) => {\n      if (!blob) reject(new Error('Canvas failed to create blob'))\n      else resolve(blob)\n    }, 'image/png')\n  })\n}\n\n/**\n * Decode data from PNG\n */\nexport async function decodeBufferFromPng(\n  buffer: ArrayBuffer,\n): Promise<ArrayBuffer> {\n  const blob = new Blob([buffer])\n  const image = await blobToImage(blob)\n  return decodeDataFromImage(imageElementToData(image))\n}\n", "// Browser and server\nconst { CompressionStream, DecompressionStream, Response } = globalThis\n\ntype CompressionFormat = 'gzip' | 'deflate' | 'deflate-raw'\n\nexport const defaultCompressionFormat = 'gzip'\n\n/**\n * Compress array buffer\n */\nexport async function compress(\n  data: string | ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<ArrayBuffer> {\n  const compressor = new CompressionStream(compressionFormat)\n  const stream = new Response(data).body?.pipeThrough(compressor)\n  return await new Response(stream).arrayBuffer()\n}\n\nasync function decompressAsResponse(\n  bytes: ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<Response> {\n  const decompressor = new DecompressionStream(compressionFormat)\n  const stream = new Response(bytes).body?.pipeThrough(decompressor)\n  return new Response(stream)\n}\n\nexport async function decompressAsArrayBuffer(\n  bytes: ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<ArrayBuffer> {\n  return (await decompressAsResponse(bytes, compressionFormat)).arrayBuffer()\n}\n\nexport async function decompressAsString(\n  bytes: ArrayBuffer,\n  compressionFormat: CompressionFormat = defaultCompressionFormat,\n): Promise<string> {\n  return (await decompressAsResponse(bytes, compressionFormat)).text()\n}\n\nexport { decompressAsArrayBuffer as decompress }\n", "/**\n * Convert JSON-serializable value to array buffer\n */\nexport function valueToArrayBuffer(value: any): ArrayBuffer {\n  // Value -> JSON String -> Uint8Array -> ArrayBuffer\n  return new TextEncoder().encode(JSON.stringify(value)).buffer\n}\n\n/**\n * Convert array buffer to JSON-serializable value\n */\nexport function arrayBufferToValue(buffer: ArrayBuffer) {\n  // ArrayBuffer -> JSON String -> Value\n  return JSON.parse(new TextDecoder().decode(buffer))\n}\n", "import { encodeBufferToPng, encodeBufferToBlob } from './png.js'\nimport { compress } from './compress.js'\nimport { valueToArrayBuffer } from './json-array-buffer.js'\nimport { createImage } from './image/index.js'\n\n/**\n * Encode JSON-serializable value to PNG image data as array buffer\n */\nexport async function encode(value: any): Promise<ArrayBuffer> {\n  return await encodeBufferToPng(await compress(valueToArrayBuffer(value)))\n}\n\n/**\n * Encode JSON-serializable value to PNG image data as blob\n */\nexport async function encodeToBlob(value: any): Promise<Blob> {\n  return await encodeBufferToBlob(await compress(valueToArrayBuffer(value)))\n}\n\n/**\n * Encode JSON-serializable value to HTML image element\n */\nexport async function encodeToImage(value: any, image?: HTMLImageElement): Promise<HTMLImageElement> {\n  return createImage(await encodeToBlob(value), image)\n}\n", "import { decodeBufferFromPng } from './png.js'\nimport { decompressAsArrayBuffer } from './compress.js'\nimport { arrayBufferToValue } from './json-array-buffer.js'\n\n/**\n * Decode PNG image data to JSON-serializable value\n */\nexport async function decode(buffer: ArrayBuffer): Promise<any> {\n  return arrayBufferToValue(\n    await decompressAsArrayBuffer(\n      await decodeBufferFromPng(buffer), // Decode PNG to array buffer\n    ),\n  )\n}\n\n/**\n * Decode PNG image data to array buffer\n */\nexport async function decodeBuffer(buffer: ArrayBuffer): Promise<ArrayBuffer> {\n  return await decompressAsArrayBuffer(await decodeBufferFromPng(buffer))\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "blobToImage", "compress", "createImage", "decode", "decodeBuffer", "decodeBufferFromPng", "decodeDataFromImage", "decompressAsArrayBuffer", "decompressAsString", "defaultCompressionFormat", "downloadImage", "encode", "encodeBufferToBlob", "encodeBufferToPng", "encodeDataIntoImage", "encodeToBlob", "encodeToImage", "imageElementToBlob", "imageElementToCanvas", "imageElementToData", "encodeDataIntoImage", "data", "img", "i", "size", "j", "l", "decodeDataFromImage", "image", "root", "k", "createImage", "blob", "image", "url", "downloadImage", "name", "a", "imageElementToBlob", "image", "canvas", "imageElementToCanvas", "resolve", "reject", "blob", "blobToImage", "img", "imageElementToData", "context", "width", "height", "encodeBufferToPng", "buffer", "encodeBufferToBlob", "data", "resolve", "reject", "canvas", "ctx", "size", "image", "encodeDataIntoImage", "blob", "decodeBufferFromPng", "blobToImage", "decodeDataFromImage", "imageElementToData", "CompressionStream", "DecompressionStream", "Response", "defaultCompressionFormat", "compress", "data", "compressionFormat", "compressor", "stream", "decompressAsResponse", "bytes", "decompressor", "decompressAsArrayBuffer", "decompressAsString", "valueToArrayBuffer", "value", "arrayBufferToValue", "buffer", "encode", "value", "encodeBufferToPng", "compress", "valueToArrayBuffer", "encodeToBlob", "encodeBufferToBlob", "encodeToImage", "image", "createImage", "decode", "buffer", "arrayBufferToValue", "decompressAsArrayBuffer", "decodeBufferFromPng", "decodeBuffer"]
}
