{
  "version": 3,
  "sources": ["../src/test-runner.ts"],
  "sourcesContent": ["// Test runner\n\nconst tests: Test[] = []\n\ntype Test = {\n  title: string\n  callback: TestCallback\n  assertions: Assertion[]\n  result?: boolean\n  error?: unknown\n}\n\ntype TestCallback = (it: Function, is: Function) => any\n\nconst test = (title: string, callback: () => void) =>\n  tests.push({\n    title,\n    callback,\n    assertions: [],\n    result: undefined,\n    error: undefined,\n  })\n\ntype Assertion = {\n  title: string\n  result: boolean\n}\n\nconst runTests = async (report = consoleReporter) => {\n  report('tests', tests)\n  for (const test of tests) {\n    report('test', { test })\n    const it = (title: string, result: boolean) => {\n      report('assert', { title, result })\n      test.assertions.push({ title, result })\n    }\n    try {\n      await test.callback(it, isEqual)\n      test.result = test.assertions.filter((a) => !a.result).length === 0\n    } catch (error) {\n      report('error', error)\n      test.result = false\n      test.error = error\n    }\n    report('testEnd', test)\n  }\n\n  // Report\n\n  const pass = tests.map((test) => test.result).filter((r) => r).length\n  const total = tests.length\n  const fail = total - pass\n\n  const results = {\n    tests,\n    pass,\n    fail,\n    total,\n  }\n\n  report('testsEnd', results)\n\n  return results\n}\n\n// Reporter\n\nfunction consoleReporter(type: string, data: any) {\n  switch (type) {\n    case 'tests':\n      console.log('Tests')\n      break\n    case 'testsEnd':\n      {\n        const { pass, total } = data\n        console.log(pass, '/', total)\n      }\n      break\n    case 'test':\n      {\n        const { test } = data\n        console.group(test.title)\n      }\n      break\n    case 'testEnd':\n      console.groupEnd()\n      break\n    case 'assert':\n      {\n        const { title, result } = data\n        console[result ? 'log' : 'warn'](title, !!result)\n      }\n      break\n    case 'error':\n      console.error(data)\n      break\n    default:\n      break\n  }\n}\n\n// Equality\n\nconst { getOwnPropertySymbols, is, keys, prototype } = Object\nconst { hasOwnProperty, valueOf } = prototype\nconst { isView } = ArrayBuffer\nconst Node = globalThis.Node\n\nconst isEqualArray = (\n  a: unknown[],\n  b: unknown[],\n  _compareMap: Map<unknown, unknown>,\n): boolean => {\n  if (a.length !== b.length) return false\n\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (!isEqualGeneral(a[i], b[i], _compareMap)) return false\n  }\n\n  return true\n}\n\nconst isEqualMapAdvanced = (\n  a: Map<unknown, unknown>,\n  b: Map<unknown, unknown>,\n  _compareMap: Map<unknown, unknown>,\n): boolean => {\n  const entriesA = Array.from(a.entries())\n  const entriesB = Array.from(b.entries())\n\n  /* eslint-disable no-labels */\n  outer: for (let i = entriesA.length - 1; i >= 0; i--) {\n    const entryA = entriesA[i]\n\n    for (let j = entriesB.length - 1; j >= 0; j--) {\n      const entryB = entriesB[j]\n\n      if (\n        isEqualGeneral(entryA[0], entryB[0], _compareMap) &&\n        isEqualGeneral(entryA[1], entryB[1], _compareMap)\n      ) {\n        entriesB.splice(j, 1)\n\n        continue outer\n      }\n    }\n\n    return false\n  }\n\n  return true\n}\n\nconst isEqualMap = (\n  a: Map<unknown, unknown>,\n  b: Map<unknown, unknown>,\n  _compareMap: Map<unknown, unknown>,\n): boolean => {\n  if (a.size !== b.size) return false\n\n  for (const [key, valueA] of a.entries()) {\n    const valueB = b.get(key)\n\n    if (!isEqualGeneral(valueA, valueB, _compareMap)) {\n      return isEqualMapAdvanced(a, b, _compareMap)\n    }\n\n    if (valueB === undefined && !b.has(key)) return false\n  }\n\n  return true\n}\n\nconst isEqualSetAdvanced = (\n  a: Set<unknown>,\n  b: Set<unknown>,\n  _compareMap: Map<unknown, unknown>,\n): boolean => {\n  const valuesA = Array.from(a.values())\n  const valuesB = Array.from(b.values())\n\n  outer: for (let i = valuesA.length - 1; i >= 0; i--) {\n    const valueA = valuesA[i]\n\n    for (let j = valuesB.length - 1; j >= 0; j--) {\n      const valueB = valuesB[j]\n\n      if (isEqualGeneral(valueA, valueB, _compareMap)) {\n        valuesB.splice(j, 1)\n\n        continue outer\n      }\n    }\n\n    return false\n  }\n\n  return true\n}\n\nconst isEqualSet = (\n  a: Set<unknown>,\n  b: Set<unknown>,\n  _compareMap: Map<unknown, unknown>,\n): boolean => {\n  if (a.size !== b.size) return false\n\n  for (const [valueA] of a.entries()) {\n    if (!b.has(valueA)) return isEqualSetAdvanced(a, b, _compareMap)\n  }\n\n  return true\n}\n\nconst isEqualDate = (a: Date, b: Date): boolean => {\n  return is(a.getTime(), b.getTime())\n}\n\nconst isEqualRegExp = (a: RegExp, b: RegExp): boolean => {\n  return a.source === b.source && a.flags === b.flags\n}\n\nconst isEqualArrayBuffer = (a: ArrayBuffer, b: ArrayBuffer): boolean => {\n  if (a.byteLength !== b.byteLength) return false\n\n  return isEqualTypedArray(new Uint8Array(a), new Uint8Array(b))\n}\n\nfunction isEqualTypedArray<\n  T extends\n    | Int8Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n    | BigInt64Array\n    | BigUint64Array,\n>(a: T, b: T): boolean {\n  if (a.length !== b.length) return false\n\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (a[i] !== b[i]) return false\n  }\n\n  return true\n}\n\nconst isEqualValueOf = (\n  a: object,\n  b: object,\n  _compareMap: Map<unknown, unknown>,\n): boolean => {\n  return isEqualGeneral(a.valueOf(), b.valueOf(), _compareMap)\n}\n\nconst isEqualObject = (\n  a: Record<string | number | symbol, unknown>,\n  b: Record<string | number | symbol, unknown>,\n  _compareMap: Map<unknown, unknown>,\n): boolean => {\n  const propertiesA = keys(a)\n  const propertiesB = keys(b)\n\n  if (propertiesA.length !== propertiesB.length) return false\n\n  for (let i = propertiesA.length - 1; i >= 0; i--) {\n    const property = propertiesA[i]\n    const valueA = a[property]\n    const valueB = b[property]\n\n    if (!isEqualGeneral(valueA, valueB, _compareMap)) return false\n\n    if (valueB === undefined && !hasOwnProperty.call(b, property)) return false\n  }\n\n  const symbolsA = getOwnPropertySymbols(a)\n  const symbolsB = getOwnPropertySymbols(b)\n\n  if (symbolsA.length !== symbolsB.length) return false\n\n  for (let i = symbolsA.length - 1; i >= 0; i--) {\n    const symbol = symbolsA[i]\n    const valueA = a[symbol]\n    const valueB = b[symbol]\n\n    if (!isEqualGeneral(valueA, valueB, _compareMap)) return false\n\n    if (valueB === undefined && !hasOwnProperty.call(b, symbol)) return false\n  }\n\n  return true\n}\n\nfunction isEqualGeneral(\n  a: any,\n  b: any,\n  _compareMap: Map<unknown, unknown>,\n): boolean {\n  if (is(a, b)) return true\n\n  if (\n    typeof a === 'object' &&\n    typeof b === 'object' &&\n    a !== null &&\n    b !== null\n  ) {\n    const { constructor } = a\n    const { constructor: constructorB } = b\n\n    if (constructor && constructorB && constructor !== constructorB) {\n      return false\n    }\n\n    if (_compareMap.get(a) === b) return true\n\n    _compareMap.set(a, b)\n\n    if (!constructor || !constructorB) {\n      if (\n        (!constructor || constructor === Object) &&\n        (!constructorB || constructorB === Object)\n      ) {\n        return isEqualObject(a, b, _compareMap)\n      } else {\n        return false\n      }\n    }\n\n    if (constructor === Array) {\n      return isEqualArray(a, b, _compareMap)\n    } else if (constructor === Map) {\n      return isEqualMap(a, b, _compareMap)\n    } else if (constructor === Set) {\n      return isEqualSet(a, b, _compareMap)\n    } else if (constructor === Date) {\n      return isEqualDate(a, b)\n    } else if (constructor === RegExp) {\n      return isEqualRegExp(a, b)\n    } else if (constructor === ArrayBuffer) {\n      return isEqualArrayBuffer(a, b)\n    } else if (isView(a)) {\n      return isEqualTypedArray(a, b)\n    } else if (\n      constructor === Promise ||\n      constructor === WeakMap ||\n      constructor === WeakSet ||\n      constructor === Node\n    ) {\n      return false\n    } else if (a.valueOf !== valueOf) {\n      return isEqualValueOf(a, b, _compareMap)\n    } else {\n      return isEqualObject(a, b, _compareMap)\n    }\n  }\n\n  return false\n}\n\nfunction isEqual(a: unknown, b: unknown): boolean {\n  return isEqualGeneral(a, b, new Map())\n}\n\nObject.assign(window, {\n  test,\n  runTests,\n})\n"],
  "mappings": "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",
  "names": ["tests", "test", "title", "callback", "runTests", "report", "consoleReporter", "it", "result", "isEqual", "a", "error", "pass", "r", "total", "fail", "results", "type", "data", "getOwnPropertySymbols", "is", "keys", "prototype", "hasOwnProperty", "valueOf", "isView", "Node", "isEqualArray", "b", "_compareMap", "i", "isEqualGeneral", "isEqualMapAdvanced", "entriesA", "entriesB", "outer", "entryA", "j", "entryB", "isEqualMap", "key", "valueA", "valueB", "isEqualSetAdvanced", "valuesA", "valuesB", "isEqualSet", "isEqualDate", "isEqualRegExp", "isEqualArrayBuffer", "isEqualTypedArray", "isEqualValueOf", "isEqualObject", "propertiesA", "propertiesB", "property", "symbolsA", "symbolsB", "symbol", "constructor", "constructorB"]
}
