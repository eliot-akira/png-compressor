"use strict";var PNGCompressor=(()=>{var p=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var T=(r,e)=>{for(var o in e)p(r,o,{get:e[o],enumerable:!0})},C=(r,e,o,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of b(e))!P.call(r,a)&&a!==o&&p(r,a,{get:()=>e[a],enumerable:!(t=h(e,a))||t.enumerable});return r};var v=r=>C(p({},"__esModule",{value:!0}),r);var L={};T(L,{decode:()=>j,decodeBuffer:()=>E,encode:()=>I,encodeToBlob:()=>z});async function g(r){return await(await y(r)).arrayBuffer()}async function y(r){let e=new Uint8Array(r);return new Promise((o,t)=>{let a=document.createElement("canvas"),s=a.getContext("2d"),n=Math.ceil(Math.sqrt(e.length/3+1)),u=a.width=n,m=a.height=n,f=s?.getImageData(0,0,u,m);U(e,f.data),s?.putImageData(f,0,0),a.toBlob(c=>{c?o(c):t(new Error("Canvas failed to create blob"))},"image/png")})}function U(r,e){for(let o=0,t=r.length;o<3;o++)e[o]=t/Math.pow(256,o)%256|0;e[3]=255;for(let o=4,t=0,a=e.length;o<a;o+=4,t+=3)e[o]=r[t]||0,e[o+1]=r[t+1]||0,e[o+2]=r[t+2]||0,e[o+3]=255;return e}var{CompressionStream:F,DecompressionStream:D,Response:i}=globalThis,d="gzip";async function B(r,e=d){let o=new F(e),t=new i(r).body?.pipeThrough(o);return await new i(t).arrayBuffer()}async function R(r,e=d){let o=new D(e),t=new i(r).body?.pipeThrough(o);return new i(t)}async function l(r,e=d){return(await R(r,e)).arrayBuffer()}function w(r){return new TextEncoder().encode(JSON.stringify(r)).buffer}function x(r){return JSON.parse(new TextDecoder().decode(r))}async function I(r){return await g(await B(w(r)))}async function z(r){return await y(await B(w(r)))}async function A(r){let e=new Blob([r]);return new Promise((o,t)=>{let a=new Image;a.onload=function(){let s=document.createElement("canvas"),n=s.getContext("2d"),u=s.width=a.width,m=s.height=a.height;n.drawImage(a,0,0);let f=n.getImageData(0,0,u,m).data,c=S(f);URL.revokeObjectURL(a.src),o(c)},a.onerror=t,a.src=URL.createObjectURL(e)})}function S(r){let e=0;for(let t=0;t<3;t++)e+=r[t]*Math.pow(256,t);let o=new Uint8Array(e);r:for(let t=4,a=0,s=r.length;a<s;t+=4,a+=3)for(let n=0;n<3;n++){if(a+n>=e)break r;o[a+n]=r[t+n]}return o.buffer}async function j(r){return x(await l(await A(r)))}async function E(r){return await l(await A(r))}return v(L);})();
//# sourceMappingURL=png-compressor.js.map
